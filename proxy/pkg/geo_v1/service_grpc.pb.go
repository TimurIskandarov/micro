// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service.proto

package geo_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GeoV1_AddressSearch_FullMethodName = "/geo_v1.GeoV1/AddressSearch"
	GeoV1_GeoCode_FullMethodName       = "/geo_v1.GeoV1/GeoCode"
)

// GeoV1Client is the client API for GeoV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoV1Client interface {
	AddressSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GeoCode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error)
}

type geoV1Client struct {
	cc grpc.ClientConnInterface
}

func NewGeoV1Client(cc grpc.ClientConnInterface) GeoV1Client {
	return &geoV1Client{cc}
}

func (c *geoV1Client) AddressSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, GeoV1_AddressSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoV1Client) GeoCode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error) {
	out := new(GeocodeResponse)
	err := c.cc.Invoke(ctx, GeoV1_GeoCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoV1Server is the server API for GeoV1 service.
// All implementations must embed UnimplementedGeoV1Server
// for forward compatibility
type GeoV1Server interface {
	AddressSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	GeoCode(context.Context, *GeocodeRequest) (*GeocodeResponse, error)
	mustEmbedUnimplementedGeoV1Server()
}

// UnimplementedGeoV1Server must be embedded to have forward compatible implementations.
type UnimplementedGeoV1Server struct {
}

func (UnimplementedGeoV1Server) AddressSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressSearch not implemented")
}
func (UnimplementedGeoV1Server) GeoCode(context.Context, *GeocodeRequest) (*GeocodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoCode not implemented")
}
func (UnimplementedGeoV1Server) mustEmbedUnimplementedGeoV1Server() {}

// UnsafeGeoV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoV1Server will
// result in compilation errors.
type UnsafeGeoV1Server interface {
	mustEmbedUnimplementedGeoV1Server()
}

func RegisterGeoV1Server(s grpc.ServiceRegistrar, srv GeoV1Server) {
	s.RegisterService(&GeoV1_ServiceDesc, srv)
}

func _GeoV1_AddressSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoV1Server).AddressSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoV1_AddressSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoV1Server).AddressSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoV1_GeoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoV1Server).GeoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoV1_GeoCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoV1Server).GeoCode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoV1_ServiceDesc is the grpc.ServiceDesc for GeoV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geo_v1.GeoV1",
	HandlerType: (*GeoV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressSearch",
			Handler:    _GeoV1_AddressSearch_Handler,
		},
		{
			MethodName: "GeoCode",
			Handler:    _GeoV1_GeoCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
